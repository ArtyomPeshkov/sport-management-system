1. Необходимые файлы
DONE:  distance.csv // список дистанций с КТ (Маша)
DONE:  group-to-distance.csv // сопоставление групп и дистанций (Маша)
2. Общее
***Классы умеют принимать файлы, парсеры лежат внутри классов (Артём)
***Хранить в группе список участников
**Добавить в Participant поля для результатов
*При получении файла групп создать список групп (enum) (Маша)
*class Distance хранить контрольные точки
*Добавить название команды в класс Participant (Маша)
Проверка корректности желаемой группы
Запрос пола в заявке
!Refactoring
3. Функции для 1 части
Необходимо:
{
distances.csv
groups-and-distances.csv
applications/
}
Считывание дистанций
Считывание групп + присвоение дистанций
Функция итерирования по applications/ (Артём)
Считывание всех applications + распределение по группам
Жеребьёвка
Формирование стартового протокола
4. Функции для 2 части
Необходимо:
{
start.csv
splits.csv
distances.csv
groups-and-distances.csv
}
data class ControlPointWithTime
Считывание дистанций и контрольных точек // условие корректной работы программы: наличие файла дистанций
Считывание файла групп с присвоенными дистанциями // условие корректной работы программы: наличие файла группа-дистанция
Считывание стартового протокола, распределение участников в группы
Считывание протокола прохождения КТ в Map<Int, List<ControlPointWithTime>>, проходимся по группам, проходимся по каждому участнику, достаём из Map время прохождения дистанции и запишем каждому участнику
 + проверка на корректность участников и корректность времени прохождения точек
Формирование протокола результатов
5. Функции для 3 части
Необходимо:
{
results.csv
}
Считать протокол результатов в список строк (строка=участник или название группы)
Идём сверху вниз, доходим до группы, в каждой группе запоминаем результат первого участника для подсчёта очков и записываем каждого участника с очками в Collective + добавляем очки участника коллективу
Формируем по полученным данным протокол