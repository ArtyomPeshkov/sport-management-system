0. DONE
DONE:  distance.csv // список дистанций с КТ (Маша)
DONE:  group-to-distance.csv // сопоставление групп и дистанций (Маша)
DONE: ***Хранить в группе список участников(Артём)
DONE: ***Перенести Constants.kt в тело Event (Артём)
DONE: **Функции-расширения для Event (setupGroups();distanceList.forEach {setNumbersAndTime(getGroupsByDistance(it))}) (Никита)
DONE:  *При получении файла групп создать список групп(Маша)
DONE: *class Distance хранить контрольные точки (Артём)
DONE:  *Добавить название команды в класс Participant (Маша)
DONE: Проверка корректности желаемой группы (Артём)
DONE: Запрос пола в заявке (Артём)
DONE: Считывание дистанций (Артём)
DONE: Считывание групп + присвоение дистанций (Артём)
DONE: Функция итерирования по applications/ (Артём)
DONE: Считывание всех applications (Артём)
DONE: Распределение по группам (Артём)
DONE:  Жеребьёвка (Артём)
DONE:  Формирование стартового протокола (Никита)
DONE?: data class ControlPointWithTime (Артём)
DONE?: Считывание дистанций и контрольных точек // условие корректной работы программы: наличие файла дистанций (Артём)
DONE?: Считывание файла групп с присвоенными дистанциями // условие корректной работы программы: наличие файла группа-дистанция (Артем)
DONE: Считывание стартового протокола, распределение участников в группы (Маша)
DONE: Добавить требования для групп (конфигурационный файл) (Артём)
DONE: Запись пола в стартовый протокол для удобного парсинга во второй части (Маша)
1. Необходимые файлы
2. Общее
NOT FINISHED YET: ***Классы умеют принимать файлы, парсеры лежат внутри классов (Артём) + ...
NOT FINISHED YET: **Добавить в Participant поля для результатов (Артём) + ...
!!!Refactoring
ParserFunctions.kt для функций в Main.kt (Маша)
Опционально:
Присуждение разряда (+ конфигурационный файл для описания разрядов)
3. Функции для 1 части
Необходимо:
{
distances.csv
groups-and-distances.csv
applications/
}
"Шапка" (названия столбцов) в стартовом протоколе каждой группы
Удалить общий стартовый протокол
Закидывать копию полученной папки в папку config (для сквозного тестирование, попытаемся запустить прогу в 3-х режимах подряд сразу)
4. Функции для 2 части
Необходимо:
{
start.csv
splits.csv
distances.csv
groups-and-distances.csv
}
//Возможно будем считывать в Map<String, Group> ((название) -> группа)
Считывание протокола прохождения КТ в Map<Int, List<ControlPointWithTime>>, проходимся по группам, проходимся по каждому участнику, достаём из Map время прохождения дистанции и запишем каждому участнику
проверка на корректность участников и корректность времени прохождения точек (Маша) + (Артём)
Формирование протокола результатов
5. Функции для 3 части
Необходимо:
{
results.csv
}
Считать протокол результатов в список строк (строка=участник или название группы)
Идём сверху вниз, доходим до группы, в каждой группе запоминаем результат первого участника для подсчёта очков и записываем каждого участника с очками в Collective + добавляем очки участника коллективу
Формируем по полученным данным протокол